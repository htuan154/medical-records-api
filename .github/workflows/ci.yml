name: CI - CouchDB + Node

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest

    env:
      COUCHDB_USER: ${{ secrets.COUCHDB_USER }}
      COUCHDB_PASSWORD: ${{ secrets.COUCHDB_PASSWORD }}
      APP_KEY: ${{ secrets.APP_KEY }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      COUCHDB_URL: http://127.0.0.1:5984
      APP_DB_NAME: medical-records

    services:
      couchdb:
        image: couchdb:3.5
        ports:
          - 5984:5984
        env:
          COUCHDB_USER: ${{ secrets.COUCHDB_USER }}
          COUCHDB_PASSWORD: ${{ secrets.COUCHDB_PASSWORD }}
          COUCHDB_SINGLE_NODE: "true"
        options: >-
          --health-cmd "curl -fsS http://localhost:5984/_up || exit 1"
          --health-interval 2s
          --health-timeout 2s
          --health-retries 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for CouchDB healthy
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do
            if curl -fsS "${COUCHDB_URL}/_up" >/dev/null; then
              echo "CouchDB is up"
              break
            fi
            sleep 1
          done

      - name: Bootstrap CouchDB (idempotent & friendly logs)
        shell: bash
        run: |
          set -euo pipefail
          base="${COUCHDB_URL}"
          auth="-u ${COUCHDB_USER}:${COUCHDB_PASSWORD}"

          echo ">> enable_single_node"
          cat >/tmp/enable_single_node.json <<JSON
          {
            "action": "enable_single_node",
            "username": "${COUCHDB_USER}",
            "password": "${COUCHDB_PASSWORD}",
            "port": 5984,
            "bind_address": "0.0.0.0"
          }
          JSON
          curl -fsS $auth -X POST "$base/_cluster_setup" \
            -H "Content-Type: application/json" \
            --data-binary @/tmp/enable_single_node.json || true

          echo ">> finish_cluster (201=done, 400=already finished)"
          code=$(curl -sS $auth -o /dev/null -w "%{http_code}" -X POST "$base/_cluster_setup" \
            -H "Content-Type: application/json" \
            --data-binary '{"action":"finish_cluster"}')
          if [[ "$code" == "201" || "$code" == "400" ]]; then
            echo "finish_cluster -> $code (OK)"
          else
            echo "::error::finish_cluster returned HTTP $code"; exit 1
          fi

          ensure_db () {
            local db="$1"
            local code
            code=$(curl -sS $auth -o /dev/null -w "%{http_code}" -X PUT "$base/$db?n=1")
            case "$code" in
              201|202) echo "Created $db" ;;
              412)     echo "$db already exists" ;;
              *)       echo "::error::Unexpected HTTP $code creating $db"; exit 1 ;;
            esac
          }
          for db in _users _replicator _global_changes; do ensure_db "$db"; done

          echo ">> all dbs:"
          curl -sS $auth "$base/_all_dbs"; echo

      - name: Assert system DBs exist
        shell: bash
        run: |
          set -euo pipefail
          base="${COUCHDB_URL}"
          auth="-u ${COUCHDB_USER}:${COUCHDB_PASSWORD}"
          for db in _users _replicator _global_changes; do
            code=$(curl -sS $auth -o /dev/null -w "%{http_code}" "$base/$db")
            if [[ "$code" == "200" ]]; then
              echo "$db OK"
            else
              echo "::error::System DB $db not ready (HTTP $code)"; exit 1
            fi
          done

      - name: (Optional) Create application DB
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${APP_DB_NAME}" ]]; then
            base="${COUCHDB_URL}"
            auth="-u ${COUCHDB_USER}:${COUCHDB_PASSWORD}"
            code=$(curl -sS $auth -o /dev/null -w "%{http_code}" -X PUT "$base/${APP_DB_NAME}")
            case "$code" in
              201|202) echo "Created ${APP_DB_NAME}" ;;
              412)     echo "${APP_DB_NAME} already exists" ;;
              *)       echo "::error::Unexpected HTTP $code creating ${APP_DB_NAME}"; exit 1 ;;
            esac
          fi

      # ---------- NodeJS steps (auto-fallback if no lockfile) ----------
      - name: Setup Node
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps (npm ci if lockfile)
        if: ${{ hashFiles('**/package.json') != '' && hashFiles('**/package-lock.json') != '' }}
        run: npm ci

      - name: Install deps (npm install fallback)
        if: ${{ hashFiles('**/package.json') != '' && hashFiles('**/package-lock.json') == '' }}
        run: npm install

      - name: Run tests (npm)
        if: ${{ hashFiles('**/package.json') != '' }}
        run: npm test --if-present

      # ---------- (Optional) Laravel ----------
      # - name: Setup PHP
      #   uses: shivammathur/setup-php@v2
      #   with:
      #     php-version: "8.2"
      # - run: composer install --no-interaction --prefer-dist
      # - run: php artisan test --env=testing
