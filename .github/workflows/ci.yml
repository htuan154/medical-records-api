name: CI
on:
  push: { branches: [ main, develop ] }
  pull_request: { branches: [ main, develop ] }

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      couchdb:
        image: couchdb:3
        ports: [ "5984:5984" ]
        env:
          COUCHDB_USER: admin
          COUCHDB_PASSWORD: admin123
        options: >-
          --health-cmd="curl -fsS http://localhost:5984/_up || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=40

    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, zip, gd, bcmath, curl
          tools: composer:v2
          coverage: none

      - uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      # 1) Tạo .env cho CI (KHÔNG copy .env.example)
      - name: Prepare .env (CI)
        run: |
          rm -f .env
          cat > .env <<'EOF'
          APP_NAME="Medical Records API"
          APP_ENV=testing
          APP_DEBUG=true
          APP_URL=http://localhost:9000
          APP_KEY=
          LOG_CHANNEL=stack

          COUCHDB_HOST=localhost
          COUCHDB_PORT=5984
          COUCHDB_USERNAME="admin"
          COUCHDB_PASSWORD="admin123"

          QUEUE_CONNECTION=sync
          CACHE_DRIVER=array
          SESSION_DRIVER=array
          BROADCAST_DRIVER=log
          MAIL_MAILER=log
          EOF
          php -r "file_put_contents('.env', preg_replace('/^APP_KEY=.*/m','APP_KEY='.('base64:'.base64_encode(random_bytes(32))), file_get_contents('.env')));"

      - name: Debug .env being used
        run: |
          echo "---- .env (first lines) ----"
          head -n 20 .env || true

      # 2) Chờ CouchDB & init single-node
      - name: Wait & init CouchDB
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:5984/_up >/dev/null; then
              echo "CouchDB is up"; break
            fi; sleep 1
          done
          curl -fsS -u admin:admin123 -X PUT http://localhost:5984/_node/_local/_config/cluster/n -d '"1"'
          for db in _users _replicator _global_changes; do
            curl -fsS -u admin:admin123 -X PUT "http://localhost:5984/$db?n=1" || true
          done

      # 3) Cài composer nhưng KHÔNG chạy scripts (tránh artisan chạy sớm)
      - name: Install Dependencies (no scripts)
        run: composer install --no-interaction --prefer-dist --no-progress --no-scripts

      # 4) Bây giờ artisan mới an toàn
      - name: Discover packages & clear caches
        run: |
          php artisan package:discover --ansi || true
          php artisan config:clear || true
          php artisan cache:clear || true

      # 5) Pint non-blocking
      - name: Run Pint (non-blocking, quiet)
        continue-on-error: true
        run: |
          if [ -f vendor/bin/pint ]; then
            vendor/bin/pint --test -q || echo "::warning::Pint found style issues (non-blocking)."
          fi

      # 6) PHPUnit: chỉ chạy khi thật sự có file test *.php
      - name: PHPUnit (smart-skip)
        run: |
          if [ -f vendor/bin/phpunit ] && git ls-files "tests/**/*.php" | grep -q .; then
            vendor/bin/phpunit --colors=always
          else
            echo "No test files, skipping."
          fi

      # 7) Swagger non-blocking
      - name: Generate Swagger (non-blocking)
        continue-on-error: true
        run: |
          if [ -f artisan ] && php -r "exit((int)!class_exists('L5Swagger\\L5SwaggerServiceProvider'));" ; then
            php artisan l5-swagger:generate || echo "Swagger failed (non-blocking)"
          else
            echo "L5-Swagger not installed or artisan missing, skipping."
          fi
